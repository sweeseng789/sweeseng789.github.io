<?xml version="1.0" encoding="utf-8" ?>

<database>
    <post id="9">
        <title>Unilever AR Experience</title>
        <date>4/4/2020</date>
        <media tag="iframe" src="https://youtube.com/embed/cfjU2qn_1VU" width="700" height="420" frameBorder="0" allowfullscreen="true"></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Unity <br>
            <b>Coding Language:</b> C# <br>
            <b>Platform:</b> IPadOS, AR <br>
            <br>
            <b>Description:</b><br>
            Unilever AR Experience is an AR app that was used for a roadshow to educate and promote the public on what Unilever is and does.
            <br>
            <br>
            At start, users would use the IPad and scan the surrounding. Once scanned, the game would populate the area with checkpoints.
            <br>
            <br>
            Once users have completed a stage and scanned the checkpoint, they would be able to proceed onwards to the next stage.
            <br>
            <br>
            After all 4 stages are completed, a congragulation message would be presented to the user signifying that they have completed the app.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>QR Code</li>
                <ul>
                    <li>
                        QR code is used to check and ensure that the player is at the starting point.
                    </li>
                </ul>

                <li>AR Function</li>
                <ul>
                    <li>
                        Checkpoints are being placed on screen based on real world position of which users could go up and inspect it.
                    </li>
                </ul>

                <li>Image Recognition</li>
                <ul>
                    <li>
                        Used to scan the area so that checkpoints can be placed on the screen.
                    </li>
                </ul>
            </ul>
            ]]>
        </description>
    </post>

    <post id="8">
        <title>Montblanc Timewalker Prix</title>
        <date>4/4/2020</date>
        <media tag="img" src="Resources/Montblanc Timewalker Prix/Montblanc 1 1024 x 376px.jpg" width="500" ></media>
        <media tag="img" src="Resources/Montblanc Timewalker Prix/Montblanc 2 1024 x 376px.jpg" width="500" ></media>
        <media tag="img" src="Resources/Montblanc Timewalker Prix/Montblanc 3 1024 x 376px.jpg" width="500" ></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Unity <br>
            <b>Coding Language:</b> C# <br>
            <b>Platform:</b> Android, IOS <br>
            <br>
            <b>Description:</b><br>
            Montblanc Timewalker Prix was an app used in an amazing race meant to celebrate the anniversary of Montblanc.
            <br>
            <br>
            Users would be notify of a location that they will need to go to. 
            Once users has reach the location, their are required to scan the QR code located there to log their checkpoint, 
            and the next location would be disseminated through the app.
            <br>
            <br>
            Users who have completed all checkpoints in the fastest time would be the winner of the race.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>QR Code</li>
                <ul>
                    <li>
                        QR code is used to validate that user has reached the checkpoint.
                    </li>
                </ul>

                <li>Native OS Function</li>
                <ul>
                    <li>
                        Once users have finished the race. The app would search for and open up "Instagram".
                    </li>
                </ul>
            </ul>
            ]]>
        </description>
    </post>

    <post id="7">
        <title>VR Archery</title>
        <date>1/7/2017</date>
        <media tag="iframe" src="https://youtube.com/embed/_1WRmvKn3FY" width="700" height="420" frameBorder="0" allowfullscreen="true"></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Unity <br>
            <b>Coding Language:</b> C# <br>
            <b>Platform:</b> Samsung VR, Google Daydream, VR, Android<br>
            <br>
            <b>Description:</b><br>
            VR Archery was a simple game that i made for my Final Year Project(FYP) for my last semester in Nanyang Polytechnic(NYP).
            <br>
            <br>
            The goal of this game is to demonstrate the usage of a VR controller as a remote game controller for interaction with the virtual world,
            as compared to the traditional method of using VR headset controls.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>Multiple Platform Control</li>
                <ul>
                    <li>
                        As Unity is a game engine that can be used to built for different platform, a different set of controls are needed for each different platform.
                        One example being that you can't use the controls for VR headset on PC.
                    </li>

                    <li>
                        To help make the code cleaner, as instead of multiple if statement to cater for different platform controls.
                        The code was written in a way that it would check for one platform's control instead of multiple platform checks, hence improving performance.
                    </li>
                </ul>

                <li>Particle System (Optimized)</li>
                <ul>
                    <li>
                        Instead of generating particles when they are needed, the particles are generated beforehand.
                        When they are needed, the particle system would reuse pre-existing unused particles instead of generating new ones,
                        which it would only do if there isn't any pre-existing unused particles.
                    </li>
                </ul>

                <li>Physics</li>
                <ul>
                    <li>
                        Arrows shot in the game are affected by gravity.
                        As the tip is heavier than the tail, as soon as the arrow is shot, it would slowly rotate towards the ground, giving it a realistic feel.
                    </li>
                </ul>
            </ul>
            ]]>
        </description>
    </post>

    <post id="6">
        <title>Nemesis Perspective</title>
        <date>13/11/2016</date>
        <media tag="iframe" src="https://youtube.com/embed/cj9UqdQMn-8" width="700" height="420" frameBorder="0" allowfullscreen="true"></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Unity <br>
            <b>Coding Language:</b> C# <br>
            <b>Platform:</b> PC, VR, HTC Vive <br>
            <br>
            <b>Description:</b><br>
            Nemesis Perspective is a local player vs player(PvP) game where one player will be playing as the monster with HTC Vive,
            with another player playing as the hero with keyboard or controllers.
            <br>
            <br>
            I worked on the artificial intelligence(AI) part of the game for the hero. 
            I was required to make the hero challenging but at the same time unpredictable to the player.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>Probability</li>
                <ul>
                    <li>
                        Whether the hero choose to move around the map or attack the boss is all based on a probability count that is set before run time.
                    </li>

                    <li>
                        If the monster tries to grab the hero while she is attacking, there is a 30% chance for the hero to stop its attack and run to safety.
                    </li>
                </ul>

                <li>Fuzzy Logic</li>
                <ul>
                    <li>
                        If the hero choose to attack the boss, a fuzzy logic will allow it to choose if it should attack with its normal or charged attack.
                    </li>
                </ul>

                <li>Random Movement</li>
                <ul>
                    <li>
                        Points are place around the map and the hero will select one of them and path towards it.
                    </li>
                </ul>

                <li>Attack / Jump Range</li>
                <ul>
                    <li>
                        A invisible box is place in the scene to help the hero in determining whether it is able to jump to the point or able to attack the boss.
                    </li>
                </ul>

                <li>Out of map area</li>
                <ul>
                    <li>
                        The hero is able to detect if it is out of the map, and if it happens it will prioritize returning to the map and stop everything that it is doing now.
                    </li>
                </ul>
            </ul>
            <br>
            <br>
            <b>Award:</b><br>
            <ol>
                <li><a href="http://www.pocketgamer.co.uk/r/Virtual+Reality/Nemesis+Perspective/feature.asp?c=71345">Indie Pitch</a></li>
            </ol>
            ]]>
        </description>
    </post>

    <post id="5">
        <title>KitVendor</title>
        <date>13/11/2016</date>
        <media tag="iframe" src="https://youtube.com/embed/1tqMzz3XQWE" width="700" height="420" frameBorder="0" allowfullscreen="true"></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Unity <br>
            <b>Coding Language:</b> C# <br>
            <b>Platform:</b> PC, VR, Oculus Rift <br>
            <br>
            <b>Description:</b><br>
            KitVendor is set in a futuristic black market shop where the player will be playing as the vendor.
            As the vendor, the player will receive contract for parts through a terminal.
            <br>
            <br>
            By using their limited funds, the player is able to generate 15 different components and supply them to the client. 
            Once the item has been generated and set for delivery, a building on the map will become green indicating that the item has to be delivered there.
            <br>
            <br>
            The player can then send out a drone to the field and control it to move towards the green building. 
            But that is not all, as the player is a black market trader there will be police drones on the field and if the player's drone were to come into contact with any of it, 
            their drone would be destroyed and once all 3 of the player's drone has been destroyed, the player automatically loses the game.
            <br>
            <br>
            For this project, we were given the opportunity to work with leap motion.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>VR Look Activation</li>
                <ul>
                    <li>
                        Depend on where the player is looking through the Oculus Rift, they are able to activate game elements and event.
                    </li>
                </ul>

                <li>Inventory System</li>
                <ul>
                    <li>
                        To activate the inventory, player would have to look up and while the inventory is activated, 
                        depending on where the player is looking at, it would select the nearest object for the player to pick out. 
                    </li>

                    <li>
                        To deactivate the inventory, player would have to look down after they are done with the inventory.
                    </li>
                </ul>

                <li>Client Generation with Probability</li>
                <ul>
                    <li>
                        After a certain time has elapsed and a probability check is true, 
                        a client will be randomly generated and the components that the client required are also randomly generated.
                    </li>

                    <li>
                        Once a client has been generated, there will be given timing,
                        where the player has to generate a component to assign to the client. 
                        Failure to do so will result in the client withdrawing his/ her business.
                    </li>
                </ul>
            </ul>
            ]]>
        </description>
    </post>

    <post id="4">
        <title>Gene</title>
        <date>13/11/2016</date>
        <media tag="iframe" src="https://youtube.com/embed/EOCB_d6whAI" width="700" height="420" frameBorder="0" allowfullscreen="true"></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Opengl <br>
            <b>Coding Language:</b> C++ <br>
            <br>
            <b>Description:</b><br>
            This is a game that i did for my Studio Project 3(SP3). I was responsible for the artificial intelligence(AI) in this game.
            <br>
            <br>
            The player is a subject that has been experimented with by scientist and as a result, the player have 2 special abilities. 
            Which are the to see through wall and slow down time when the player is stationary.
            <br>
            <br>
            Now the player has breaked free from his captives, they must use their newfound powers to escape from the facility without being found.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>State Handling</li>
                <ul>
                    <li>
                        The AI is able to switch to different state which is mainly attack or patrol.
                        The AI will have a different attack pattern depending on whether they are holding weapons.
                    </li>
                </ul>

                <li>Target Look-At</li>
                <ul>
                    <li>
                        The AI is able to rotate and look at its current objectives.
                        Example would be looking at player when they are detected.
                    </li>
                </ul>

                <li>Player Detection</li>
                <ul>
                    <li>
                        If the player manage to alert but wasn't seen by the AI. 
                        Any alerted AI will move to the player last known location and scan the area. 
                        If the player is detected, then the AI will switch to attack state.
                    </li>
                </ul>
            </ul>
            ]]>
        </description>
    </post>

     <post id="3">
        <title>Advanced Game Development</title>
        <date>6/11/2016</date>
        <media tag="iframe" src="https://youtube.com/embed/KnijgkRPLuE" width="700" height="420" frameBorder="0" allowfullscreen="true"></media>
        <media tag="iframe" src="https://youtube.com/embed/ajy14xN0nBY" width="700" height="420" frameBorder="0" allowfullscreen="true"></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Opengl <br>
            <b>Coding Language:</b> C++ <br>
            <br>
            <b>Description:</b><br>
            This is a game that i did for my assignment. It desmonstrates our ability to make a simple 3D game.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>Spatial Partitioning</li>
                <ul>
                    <li>
                        Optimize game by checking objects in a smaller range.
                    </li>
                </ul>

                <li>Terrain movement</li>
                <ul>
                    <li>
                        Able to move according to the height of the terrain map.
                    </li>
                </ul>

                <li>Physics Collision</li>
                <ul>
                    <li>
                        Able to collide with buildings with push back effects using AABB.
                    </li>
                </ul>

                <li>Level Loading</li>
                <ul>
                    <li>
                        Able to load different level base on player input.
                    </li>
                </ul>
            </ul>
            ]]>
        </description>
    </post>
    
    <post id="2">
        <title>Level Editor</title>
        <date>6/11/2016</date>
        <media tag="iframe" src="https://youtube.com/embed/SwJ4xzr_CU4" width="700" height="420" frameBorder="0" allowfullscreen="true"></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Opengl <br>
            <b>Coding Language:</b> C++ <br>
            <br>
            <b>Description:</b><br>
            This is a level editor that i made for my studio project. The game being shown here is a 2D version of the game Portal. 
            The level editor is able to create CSV files which generally can be used for level design, additionally it is also able to read to and write from that same CSV file.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>CSV Manipulation</li>
                <ul>
                    <li>
                        Able to create, read from and write to CSV files.
                    </li>
                </ul>

                <li>Grid System</li>
                <ul>
                    <li>
                        Each grid stores a game data for level design purpose.
                    </li>
                </ul>

                <li>Text box</li>
                <ul>
                    <li>
                        The text box are able to handle input from user and read incoming data.
                    </li>
                </ul>
            </ul>
            ]]>
        </description>
    </post>

    <post id="1">
        <title>Computer Graphics</title>
        <date>6/11/2016</date>
        <media tag="iframe" src="https://youtube.com/embed/NaSqwp2-YuU" width="700" height="420" frameBorder="0" allowfullscreen="true">></media>
        
        <description>
            <![CDATA[
            <b>Graphic Engine:</b> Opengl <br>
            <b>Coding Language:</b> C++ <br>
            <br>
            <b>Description:</b><br>
            This is an assignment that i did in 2015, it features a scene in an abandoned hill. <br>
            The raindrops and dead trees are used to further emphasis it.
            <br>
            <br>
            <b>Techniques Used:</b><br>
            <ul>
                <li>Billboard</li>
                <ul>
                    <li>
                        The raindrops are 2D image that will always rotate to face the player.
                    </li>
                </ul>

                <li>Sprite Animation</li>
                <ul>
                    <li>
                        The wolves are sprite aniumation being displayed sprite by sprite.
                    </li>
                </ul>

                <li>Height map</li>
                <ul>
                    <li>
                        Terrain in the map is being generated by a height map loaded at start up.
                    </li>
                </ul>

                <li>Multi Texture</li>
                <ul>
                    <li>
                        The height map consist of at least 2 textures.
                    </li>
                </ul>

                <li>Shader</li>
                <ul>
                    <li>
                        The lighting in the scene is the fog shader which i turned to white.
                    </li>
                </ul>

                <li>Shadow</li>
                <ul>
                    <li>
                        The are shadow in the scene with the light source being the moon.
                    </li>
                </ul>
            </ul>
            ]]>
        </description>
    </post>
</database>